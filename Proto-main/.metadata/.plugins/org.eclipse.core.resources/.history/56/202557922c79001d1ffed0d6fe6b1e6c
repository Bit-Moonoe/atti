package com.example.board.vel01.service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.board.vel01.domain.Post;
import com.example.board.vel01.repository.CommentRepository;
import com.example.board.vel01.repository.PostRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@RequiredArgsConstructor
public class PostService{
	
	private final PostRepository postRepository;
	
	private final CommentRepository commentRepository;
	
	
	public List<Post> createPost(final Post postEntity){
		validation(postEntity);
		postEntity.setCreatedDate(new SimpleDateFormat("yyyy/MM/dd").format(new Date()));
		postRepository.save(postEntity);
		log.info("post");
//		return postRepository.findByNickName(postEntity.getNickName());//한명의 정보만 보내줌
		return postRepository.findAll();
	};
	
	private void validation(final Post postEntity) {
		if(postEntity == null) {
			log.warn("postEntity cannat be null");
		throw new RuntimeException("PostEntity는 null 허용 불가");	
		}
		
		if(postEntity.getNickName() == null) {
			log.warn("해당 닉네임이 없습니다.");
		throw new RuntimeException("해당 닉네임이 없습니다.");
		}
	};
	
	public List<Post> retrieve(final String nickName){
		log.warn(nickName);
		return postRepository.findByNickName(nickName);
	}
		
	public List<Post> update(final Post.Request req, Long postId){
		Post checkPost = Post.Request.toEntity(req);
		validation(checkPost);
		
		final Post post = postRepository.findByPostId(postId);
		post.setTitle(req.getTitle());
		post.setContent(req.getContent());
		post.setCreatedDate(new SimpleDateFormat("yyyy/MM/dd").format(new Date()) + " (수정됨)");
		postRepository.save(post);
//		userCheck.ifPresent(post->{
//			post.setNickName(postEntity.getNickName());
//			post.setContent(postEntity.getContent());
//			post.setTitle(postEntity.getTitle());
//			postRepository.save(post);
//		});
		
		return retrieve(req.getNickName());
	}
	
	
	public List<Post> delete(final Post postEntity, Long postId){
		validation(postEntity);
		
		try {
//			postRepository.delete(postEntity);
			Post findPost = postRepository.findByPostId(postId);
			commentRepository.deleteAll();
			
			postRepository.deleteByPostId(postId);
		}catch(Exception e) {
			log.error("Post 삭제 중 에러 발생.", postEntity.getPostId(), e);
			throw new RuntimeException("삭제 중 에러 발생" + postEntity.getPostId());
		}
		
		return retrieve(postEntity.getNickName());
	}
	
	
	
}
